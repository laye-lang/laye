import * from "std.laye";
import "libc.laye";

struct driver_state {
    i8[*] mut program_name;

    bool mut help;
    bool mut verbose;

    bool mut use_byte_positions_in_diagnostics;

    bool mut preprocess_only;
    bool mut parse_only;
    bool mut sema_only;
    bool mut assemble_only;

    bool mut emit_lyir;
    bool mut emit_llvm;

    i8[*] mut output_file;
    i8[*] mut input_file;
}

export i32 main(i32 mut argc, i8[*][*] mut argv) {
    libc::printf("Hello, laye!\n");
    
    driver_state mut state;
    i32 parse_result = parse_args(&state, &argc, &argv);

    if (parse_result != 0) {
        return parse_result;
    }

    libc::printf("%s\n", state.program_name);
    libc::printf("help: %d\n", state.help);
    libc::printf("verbose: %d\n", state.verbose);
    libc::printf("input_file: %s\n", state.input_file);

    return 0;
}

i32 parse_args(driver_state mut& state, i32 mut& argc, i8[*][*] mut& argv) {
    state.program_name = shift_args(argc, argv);

    while (argc > 0) {
        i8[*] arg = shift_args(argc, argv);
        if (0 == libc::strcmp("--help", arg)) {
            state.help = true;
        } else if (0 == libc::strcmp("--verbose", arg)) {
            state.verbose = true;
        } else {
            state.input_file = arg;
        }
    }

    return 0;
}
