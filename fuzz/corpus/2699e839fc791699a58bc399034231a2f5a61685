// 69
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

foreign void integer_conversions() {
    i8 a = 1;
    i16 b = 2;
    i32 c = 3;
    i64 d = 4;

    i8 e = a + 1;
    i8 f = 2 * a;

    i16 g = a + 5 - b;
    i16 h = 6 * b;
    i16 i = b - a;
    i16 j = e * f / g;

    i32 k = 10 * a + b / 2;
    i32 l = k / 2;
    i32 m = (k + b * a) % 5;

    i64 n = 1 + 2 + 3 * d;
    i64 o = n + c * (a + b);
    i64 p = (e * f) + (h - (g + 2) + m) % l;

    int q = e + g + k + l;
}

foreign void integer_signedness() {
    i8 a = 1;
    u8 b = 2;
    i16 c = 3;
    u16 d = 4;
    i32 e = 5;
    u32 f = 6;
    i64 g = 7;
    u64 h = 8;

    i16 i = b * 2;
    u32 j = 5 - b + d;
    i32 k = i + a * 6 / b;
    u64 l = f * 6 + (b * 2 * d) / h;

    int m = i + j + k;
    uint n = l * h + f;
}

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 7
// +   %1 = alloca int64
// +   store %1, int64 3
// +   %2 = alloca int64
// +   store %2, int64 19
// +   %3 = load int64, %0
// +   %4 = load int64, %1
// +   %5 = add int64 %3, %4
// +   %6 = load int64, %2
// +   %7 = load int64, %1
// +   %8 = sdiv int64 %6, %7
// +   %9 = mul int64 %5, %8
// +   %10 = load int64, %2
// +   %11 = load int64, %0
// +   %12 = load int64, %1
// +   %13 = add int64 %11, %12
// +   %14 = sub int64 %10, %13
// +   %15 = add int64 %9, %14
// +   return int64 %15
// + }
int main() {
    int a = 7;
    int b = 3;
    int c = 19;

    return (a + b) * (c / b) + (c - (a + b));
}
