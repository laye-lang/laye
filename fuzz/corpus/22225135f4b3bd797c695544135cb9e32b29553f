// 3
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

// * define exported ccc main() -> int64 {
// + entry:
// +   bran// 35
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

void foo() { }

// * define layecc forever() {
// + entry:
// +   branch %_bb1
// + _bb1:
// +   call layecc void @foo()
// +   branch %_bb1
// + }
noreturn forever() {
    while {
        foo();
    }
}

// * define layecc forever_cfor() {
// + entry:
// +   branch %_bb1
// + _bb1:
// +   call layecc void @foo()
// +   branch %_bb1
// + }
noreturn forever_cfor() {
    for (;;) {
        foo();
    }
}

// * define layecc condition() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   branch %_bb1
// + _bb1:
// +   %1 = load int64, %0
// +   %2 = slt int64 %1, 10
// +   branch %2, %_bb2, %_bb3
// + _bb2:
// +   %3 = load int64, %0
// +   %4 = add int64 %3, 1
// +   store@%0, int64 %4
// +   branch %_bb1
// + _bb3:
// +   %5 = load int64, %0
// +   return int64 %5
// + }
int condition() {
    int mut accum = 0;
    while (accum < 10) {
        accum = accum + 1;
    }
    return accum;
}

// * define layecc no/ + }
int noinitнннннннннннннннннн() {
    int mut accum = 0;
    int mut i = 0;
    for (; i < 10; i = i + 1) {
        accum = accum + i;
    }
    return accum;
}

// * define layecc noinc() -> int64 {
// + entry:
// +   %0 = alloca int64
// + bran// 35
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

void foo() { }+ _bb1:
// +   %2 = load int64, %1
// +   %3 = slt int64 %2, 10
// +   branch %3, %_bb2, %_bb3
// + _bb2:
// +   %4 = load int64, %0
// +   %5 = load int64, %1
// + = alloca int64
// +   store %0, int64 0
// +   branch %_bb1
// + _bb1:
_bb2
// +  main() {
    if (false) {
        return 1;
    } else if (true) {
        re_bb2:
// +   %1 = loaturn 3;
 d