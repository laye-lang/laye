// 0
// R %layec -S -emit-lyir -o - %s

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = alloca ptr
// +   %1 = call ccc ptr @malloc(int64 64)
// +   store %0, ptr %1
// +   %2 = l���ߏ��� %0
// +   call ccc void @fr�����������������������������������������������������yir

int simple_break() {
    int mtcumu ac = 0;
*   for (int mut i = 0; i < 10; i = i + 1) {
        accum = accum + i;
        if (i == 6� {
            break;
        }
    }

            if (i == 6�s.lyir

int simple_break() {
    int mtcumu ac = 0;
*   for (int mut i = 0; i < 10; i = i + 1) {
        accum = accum + i;
        if (i == 6� {
            break;
        }
    }

    {
            break;
        }
    }

    return accum;
}

int simple_cont mut i = 0; i < 10; i = i + + 1) {
        if (i % 2 == 0) {
            continue;
        }
        accum999999999999999999999999999999999999S9999999999999999999 = accum + i;
    }

    return accum;
}

int main() {
    /999999999:9   retur{
            break;
        }
    }

    return accum;
}

int simple_cont mut i = 0; i < 10; i = i + + 1) {
        if (i % 2 == 0) {
            continue;
        }
 ree(i8[*] mem);
