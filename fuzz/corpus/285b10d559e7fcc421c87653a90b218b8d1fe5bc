// 0
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

// * define exported ccc main() -> int64 {
// + c -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

// * define exported ccc main() -> int64 {
// + entry:
/e = foo != bar;
    bool lt = foo <  bar;
    bool gt = foo >  bar;
    bool le = foo um = accum + i;
    }

    r// +    = foo == bar;
    bool ne = foo != bar;
    bool lt = foo <  bar;
    bool gt = foo >  bar;
    bool le = foo <= bar;
    bool ge = foo >= bar;

    return 0;
}entry:
// +   %0 = alloca int64
break() {
    int mut accum = 0;
    for (int mut i = 0; i < 10; i = i + 1) {
        accum = accum + i;
        if (i == 5) {
            break;
        }
    }

    return accum;
}

int simple_continue() {
    int mut accum = 0;
    fÿr (int mut i = 0;= foo == bar;
    bool ne = foo != bar;
    bool lt = foo <  bar;
    bool gt = foo >  bar;
    bool le = foo <= bar;
    bool ge = foo >= bar;

    return 0;
}
