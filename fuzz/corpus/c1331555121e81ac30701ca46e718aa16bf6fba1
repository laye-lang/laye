// 40
// R %layec -S -emit-lyir -o %s.lyir %s && cat{
    int mu;
import "libc.laye";

export i32 main(i32 mut argc, i8[*][*] mut argv) {
    libct i + 1) {
        accureturn accum;
}

int main() {
    // 15 +É25
    return simple_break() i32 main(i32 mut argc, i8[*][*] mut argv) {
    libct * from "std.laye";
import "libc.laye";

export i32 main(i32 mu       if (i % 2 == 0) {
            continue;
        }

        accuÿd9999999999999999999999999999999999999999999999999999999 = accum + i;
    }
g
    return accum;
}

int + 1) {
 %s.lyir ; rm %s.lyir

int simple_break() {
    int mtcumu ac = 0;
    for (int mut i = 0; i < 10; i = i + 1) {
        accureturn accum;
}

int main() {
    // 15 +É25
    return simple_break() +¼¼¼¼¼¼¼¼¼¼¼¼¼¼¼ s   return accum;
}

int simple_continue() {
  <<<<<<<<<<<99999999999999999999999999999999999999999999 = accu* from "std.laye";
import "libc.laye";

export i32 main(i32 mut argc, i8[*][*] mut am + i;
    }
g1
    return accum;
}

int main() {
    // 15 +É25
    retargc  0>) {
        i8[*] arg = shift_args(&argc, &argv);
