// 83
// R %layec --ir %s

// * define layecc add_three_numbers(int64 %0, int64 %1, int64 %2) -> int64 {
// + entry:
// +   %3 = alloca int64
// +   store %3, int64 %0
// +   %4 = alloca int64
// +   store %4, int64 %1
// +   %5 = alloca int64
// +   store %5, int64 %2
// +   %6 = load int64, %3
// +   %7 = load int64, %4
// +   %8 = load int64, %5
// +   %9 = add int64 %7, %8
// +   %10 = add int64 %6, %9
// +   return int64 %10
// + }
int add_three_numbers(int a, int b, int c) {
    return a + b + c;
}

// * define layecc many(int64 %0, int64 %1, int64 %2, int64 %3, int64 %4, int64 %5, int64 %6, int64 %7) -> int64 {
// + entry:
// +   %8 = alloca int64
// +   store %8, int64 %0
// +   %9 = alloca int64
// +   store %9, int64 %1
// +   %10 = alloca int64
// +   store %10, int64 %2
// +   %11 = alloca int64
// +   store %11, int64 %3
// +   %12 = alloca int64
// +   store %12, int64 %4
// +   %13 = alloca int64
// +   store %13, int64 %5
// +   %14 = alloca int64
// +   store %14, int64 %6
// +   %15 = alloca int64
// +   store %15, int64 %7
// +   %16 = load int64, %8
// +   %17 = load int64, %9
// +   %18 = load int64, %10
// +   %19 = load int64, %11
// +   %20 = load int64, %12
// +   %21 = load int64, %13
// +   %22 = load int64, %14
// +   %23 = load int64, %15
// +   %24 = add int64 %22, %23
// +   %25 = add int64 %21, %24
// +   %26 = add int64 %20, %25
// +   %27 = add int64 %19, %26
// +   %28 = add int64 %18, %27
// +   %29 = add int64 %17, %28
// +   %30 = add int64 %16, %29
// +   return int64 %30
// + }
int many(int a, int b, int c, int d, int e, int f, int g, int h) {
    return a + b + c + d + e + f + g + h;
}

// * define layecc pow(int64 %0, int64 %1) -> int64 {
// + entry:
// +   %2 = alloca int64
// +   store %2, int64 %0
// +   %3 = alloca int64
// +   store %3, int64 %1
// +   %4 = alloca int64
// +   store %4, int64 1
// +   branch %_bb1
// + _bb1:
// +   %5 = load int64, %3
// +   %6 = sgt int64 %5, 0
// +   branch %6, %_bb2, %_bb3
// + _bb2:
// +   %7 = load int64, %4
// +   %8 = load int64, %2
// +   %9 = mul int64 %7, %8
// +   store %4, int64 %9
// +   %10 = load int64, %3
// +   %11 = sub int64 %10, 1
// +   store %3, int64 %11
// +   branch %_bb1
// + _bb3:
// +   %12 = load int64, %4
// +   return int64 %12
// + }
int pow(int base, int mut exp) {
    int mut result = 1;
    while (exp > 0) {
        result = result * base;
        exp = exp - 1;
    }
    return result;
}

// * define layecc add(int64 %0, int64 %1) -> int64 {
// + entry:
// +   %2 = alloca int64
// +   store %2, int64 %0
// +   %3 = alloca int64
// +   store %3, int64 %1
// +   %4 = load int64, %2
// +   %5 = load int64, %3
// +   %6 = add int64 %4, %5
// +   return int64 %6
// + }
int add(int a, int b) {
    return a + b;
}

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   %1 = call layecc int64 @pow(int64 2, int64 3)
// +   store %0, int64 %1
// +   %2 = alloca int64
// +   %3 = load int64, %0
// +   %4 = call layecc int64 @add_three_numbers(int64 %3, int64 23, int64 20)
// +   store %2, int64 %4
// +   %5 = call layecc int64 @add(int64 3, int64 6)
// +   %6 = call layecc int64 @add(int64 5, int64 10)
// +   %7 = call layecc int64 @add(int64 %6, int64 8)
// +   %8 = call layecc int64 @add(int64 %5, int64 %7)
// +   %9 = load int64, %2
// +   %10 = add int64 %8, %9
// +   return int64 %10
// + }
int main() {
    int a = pow(2, 3);
    int result = add_three_numbers(a, 23, 20);
    return add(add(3, 6), add(add(5, 10), 8)) + result;
}
