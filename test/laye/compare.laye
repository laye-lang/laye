// 0
// R %layec -S -emit-lyir -o %s.lyir %s && cat %s.lyir ; rm %s.lyir

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 42
// +   %1 = alloca int64
// +   store %1, int64 69
// +   %2 = alloca int1
// +   %3 = load int64, %0
// +   %4 = load int64, %1
// +   %5 = eq int64 %3, %4
// +   store %2, int1 %5
// +   %6 = alloca int1
// +   %7 = load int64, %0
// +   %8 = load int64, %1
// +   %9 = ne int64 %7, %8
// +   store %6, int1 %9
// +   %10 = alloca int1
// +   %11 = load int64, %0
// +   %12 = load int64, %1
// +   %13 = slt int64 %11, %12
// +   store %10, int1 %13
// +   %14 = alloca int1
// +   %15 = load int64, %0
// +   %16 = load int64, %1
// +   %17 = sgt int64 %15, %16
// +   store %14, int1 %17
// +   %18 = alloca int1
// +   %19 = load int64, %0
// +   %20 = load int64, %1
// +   %21 = sle int64 %19, %20
// +   store %18, int1 %21
// +   %22 = alloca int1
// +   %23 = load int64, %0
// +   %24 = load int64, %1
// +   %25 = sge int64 %23, %24
// +   store %22, int1 %25
// +   return int64 0
// + }
int main() {
    int foo = 42;
    int bar = 69;

    bool eq = foo == bar;
    bool ne = foo != bar;
    bool lt = foo <  bar;
    bool gt = foo >  bar;
    bool le = foo <= bar;
    bool ge = foo >= bar;

    return 0;
}
