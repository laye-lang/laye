// 35
// R %layec -S -emit-lyir -o - %s

void foo() { }

// * define layecc forever() {
// + entry:
// +   branch %_bb1
// + _bb1:
// +   call layecc void @foo()
// +   branch %_bb1
// + }
noreturn forever() {
    while {
        foo();
    }
}

// * define layecc forever_cfor() {
// + entry:
// +   branch %_bb1
// + _bb1:
// +   call layecc void @foo()
// +   branch %_bb1
// + }
noreturn forever_cfor() {
    for (;;) {
        foo();
    }
}

// * define layecc condition() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   branch %_bb1
// + _bb1:
// +   %1 = load int64, %0
// +   %2 = icmp slt int64 %1, 10
// +   branch %2, %_bb2, %_bb3
// + _bb2:
// +   %3 = load int64, %0
// +   %4 = add int64 %3, 1
// +   store %0, int64 %4
// +   branch %_bb1
// + _bb3:
// +   %5 = load int64, %0
// +   return int64 %5
// + }
int condition() {
    int mut accum = 0;
    while (accum < 10) {
        accum = accum + 1;
    }
    return accum;
}

// * define layecc noinit() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   %1 = alloca int64
// +   store %1, int64 0
// +   branch %_bb1
// + _bb1:
// +   %2 = load int64, %1
// +   %3 = icmp slt int64 %2, 10
// +   branch %3, %_bb2, %_bb4
// + _bb2:
// +   %4 = load int64, %0
// +   %5 = load int64, %1
// +   %6 = add int64 %4, %5
// +   store %0, int64 %6
// +   branch %_bb3
// + _bb3:
// +   %7 = load int64, %1
// +   %8 = add int64 %7, 1
// +   store %1, int64 %8
// +   branch %_bb1
// + _bb4:
// +   %9 = load int64, %0
// +   return int64 %9
// + }
int noinit() {
    int mut accum = 0;
    int mut i = 0;
    for (; i < 10; i = i + 1) {
        accum = accum + i;
    }
    return accum;
}

// * define layecc noinc() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   %1 = alloca int64
// +   store %1, int64 0
// +   branch %_bb1
// + _bb1:
// +   %2 = load int64, %1
// +   %3 = icmp slt int64 %2, 10
// +   branch %3, %_bb2, %_bb3
// + _bb2:
// +   %4 = load int64, %0
// +   %5 = load int64, %1
// +   %6 = add int64 %4, %5
// +   store %0, int64 %6
// +   %7 = load int64, %1
// +   %8 = add int64 %7, 1
// +   store %1, int64 %8
// +   branch %_bb1
// + _bb3:
// +   %9 = load int64, %0
// +   return int64 %9
// + }
int noinc() {
    int mut accum = 0;
    for (int mut i = 0; i < 10; ) {
        accum = accum + i;
        i = i + 1;
    }
    return accum;
}

// * define layecc nocondition() {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   branch %_bb1
// + _bb1:
// +   call layecc void @foo()
// +   branch %_bb2
// + _bb2:
// +   %1 = load int64, %0
// +   %2 = add int64 %1, 1
// +   store %0, int64 %2
// +   branch %_bb1
// + }
noreturn nocondition() {
    for (int mut i = 0; ; i = i + 1) {
        foo();
    }
}

// * define layecc cfor() -> int64 {
// + entry:
// +   %0 = alloca int64
// +   store %0, int64 0
// +   %1 = alloca int64
// +   store %1, int64 0
// +   branch %_bb1
// + _bb1:
// +   %2 = load int64, %1
// +   %3 = icmp slt int64 %2, 10
// +   branch %3, %_bb2, %_bb4
// + _bb2:
// +   %4 = load int64, %0
// +   %5 = load int64, %1
// +   %6 = add int64 %4, %5
// +   store %0, int64 %6
// +   branch %_bb3
// + _bb3:
// +   %7 = load int64, %1
// +   %8 = add int64 %7, 1
// +   store %1, int64 %8
// +   branch %_bb1
// + _bb4:
// +   %9 = load int64, %0
// +   return int64 %9
// + }
int cfor() {
    int mut accum = 0;
    for (int mut i = 0; i < 10; i = i + 1) {
        accum = accum + i;
    }
    return accum;
}

/*

void foreach() {
    int mut[10] arr;
    for (enum i, v : arr) {
        v = i;
    }
}

*/

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = call layecc int64 @cfor()
// +   %1 = call layecc int64 @condition()
// +   %2 = sub int64 %0, %1
// +   return int64 %2
// + }
int main() {
    return cfor() - condition();
}
